syntax = "proto3";

package com.akkasls.hackathon;
option java_package = "com.akkasls.hackathon";
option java_multiple_files = true;
option java_generic_services = true;

import "akkaserverless/annotations.proto";
import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";

message Trader {
  string base_asset = 2; // asset being sold/bought (i.e. BTC/EUR -> BTC)
  string quote_asset = 3; // asset used to sell/buying (i.e. BTC/EUR -> EUR)
  int32 short_ma_period = 4; // the number of periods on which to calculate the short moving average
  int32 long_ma_period = 5; // the number of periods on which to calculate the short moving average
  double base_balance = 6;
  double quote_balance = 7;
  string ma_type = 8; // MovingAverage implementation
  double short_ma_value = 9;
  double long_ma_value = 10;

}

message CandleStick {
  double closing_price = 1;
  int64 time = 2;
}

message ByBaseAsset {
  string base_asset = 1;
}

// commands
message NewTraderCommand {
  string trader_id = 1 [(akkaserverless.field).entity_key = true];
  Trader trader = 2;
}

message AddCandleCommand {
  string trader_id = 1 [(akkaserverless.field).entity_key = true];
  CandleStick candle = 2;
}

// events
message TraderAdded {
  Trader trader = 1;
}

message OrderPlaced {
  int64 time = 1;
  string type = 2;
  double quantity = 3;
  double exchangeRate = 4;
}

message MovingAverageUpdated {
  int32 period = 1;
  double value = 2;
  int64 time = 3;
}

service CryptoTradingService {

  rpc AddCandle (AddCandleCommand) returns (google.protobuf.Empty) {}

  rpc NewTrader (NewTraderCommand) returns (Trader) {}

}

service TradersView {

  rpc ProcessTraderAdded(TraderAdded) returns (Trader) {
    option (akkaserverless.method).eventing.in = {
      event_sourced_entity: "traders"
    };
    option (akkaserverless.method).view.update = {
      table: "traders"
      transform_updates: true
    };
  }

  rpc ProcessMovingAverageUpdated(MovingAverageUpdated) returns (Trader) {
    option (akkaserverless.method).eventing.in = {
      event_sourced_entity: "traders"
    };
    option (akkaserverless.method).view.update = {
      table: "traders"
      transform_updates: true
    };
  }

  rpc GetTraders (ByBaseAsset) returns (stream Trader) {
    option (akkaserverless.method).view.query = {
      query: "SELECT * FROM traders WHERE base_asset = :base_asset"
    };
  }
}
